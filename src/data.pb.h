// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_INCLUDED_data_2eproto
#define PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_data_2eproto();
namespace data {
class EchoRequest;
class EchoRequestDefaultTypeInternal;
extern EchoRequestDefaultTypeInternal _EchoRequest_default_instance_;
class EchoResponse;
class EchoResponseDefaultTypeInternal;
extern EchoResponseDefaultTypeInternal _EchoResponse_default_instance_;
}  // namespace data
namespace google {
namespace protobuf {
template<> ::data::EchoRequest* Arena::CreateMaybeMessage<::data::EchoRequest>(Arena*);
template<> ::data::EchoResponse* Arena::CreateMaybeMessage<::data::EchoResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace data {

// ===================================================================

class EchoRequest :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.EchoRequest) */ {
 public:
  EchoRequest();
  virtual ~EchoRequest();

  EchoRequest(const EchoRequest& from);

  inline EchoRequest& operator=(const EchoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoRequest(EchoRequest&& from) noexcept
    : EchoRequest() {
    *this = ::std::move(from);
  }

  inline EchoRequest& operator=(EchoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EchoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRequest* internal_default_instance() {
    return reinterpret_cast<const EchoRequest*>(
               &_EchoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EchoRequest* other);
  friend void swap(EchoRequest& a, EchoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoRequest* New() const final {
    return CreateMaybeMessage<EchoRequest>(nullptr);
  }

  EchoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoRequest& from);
  void MergeFrom(const EchoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 select_column = 1;
  int select_column_size() const;
  void clear_select_column();
  static const int kSelectColumnFieldNumber = 1;
  ::google::protobuf::int32 select_column(int index) const;
  void set_select_column(int index, ::google::protobuf::int32 value);
  void add_select_column(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      select_column() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_select_column();

  // repeated int32 where_column = 2;
  int where_column_size() const;
  void clear_where_column();
  static const int kWhereColumnFieldNumber = 2;
  ::google::protobuf::int32 where_column(int index) const;
  void set_where_column(int index, ::google::protobuf::int32 value);
  void add_where_column(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      where_column() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_where_column();

  // repeated string column_key = 3;
  int column_key_size() const;
  void clear_column_key();
  static const int kColumnKeyFieldNumber = 3;
  const ::std::string& column_key(int index) const;
  ::std::string* mutable_column_key(int index);
  void set_column_key(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_column_key(int index, ::std::string&& value);
  #endif
  void set_column_key(int index, const char* value);
  void set_column_key(int index, const char* value, size_t size);
  ::std::string* add_column_key();
  void add_column_key(const ::std::string& value);
  #if LANG_CXX11
  void add_column_key(::std::string&& value);
  #endif
  void add_column_key(const char* value);
  void add_column_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& column_key() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_column_key();

  // @@protoc_insertion_point(class_scope:data.EchoRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > select_column_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > where_column_;
  ::google::protobuf::RepeatedPtrField<::std::string> column_key_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class EchoResponse :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:data.EchoResponse) */ {
 public:
  EchoResponse();
  virtual ~EchoResponse();

  EchoResponse(const EchoResponse& from);

  inline EchoResponse& operator=(const EchoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoResponse(EchoResponse&& from) noexcept
    : EchoResponse() {
    *this = ::std::move(from);
  }

  inline EchoResponse& operator=(EchoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EchoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResponse*>(
               &_EchoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EchoResponse* other);
  friend void swap(EchoResponse& a, EchoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoResponse* New() const final {
    return CreateMaybeMessage<EchoResponse>(nullptr);
  }

  EchoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoResponse& from);
  void MergeFrom(const EchoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string response = 1;
  int response_size() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::std::string& response(int index) const;
  ::std::string* mutable_response(int index);
  void set_response(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_response(int index, ::std::string&& value);
  #endif
  void set_response(int index, const char* value);
  void set_response(int index, const char* value, size_t size);
  ::std::string* add_response();
  void add_response(const ::std::string& value);
  #if LANG_CXX11
  void add_response(::std::string&& value);
  #endif
  void add_response(const char* value);
  void add_response(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& response() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_response();

  // repeated int32 len = 2;
  int len_size() const;
  void clear_len();
  static const int kLenFieldNumber = 2;
  ::google::protobuf::int32 len(int index) const;
  void set_len(int index, ::google::protobuf::int32 value);
  void add_len(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      len() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_len();

  // @@protoc_insertion_point(class_scope:data.EchoResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> response_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > len_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================

class EchoService_Stub;

class EchoService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline EchoService() {};
 public:
  virtual ~EchoService();

  typedef EchoService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::data::EchoRequest* request,
                       ::data::EchoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService);
};

class EchoService_Stub : public EchoService {
 public:
  EchoService_Stub(::google::protobuf::RpcChannel* channel);
  EchoService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~EchoService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements EchoService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::data::EchoRequest* request,
                       ::data::EchoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(EchoService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoRequest

// repeated int32 select_column = 1;
inline int EchoRequest::select_column_size() const {
  return select_column_.size();
}
inline void EchoRequest::clear_select_column() {
  select_column_.Clear();
}
inline ::google::protobuf::int32 EchoRequest::select_column(int index) const {
  // @@protoc_insertion_point(field_get:data.EchoRequest.select_column)
  return select_column_.Get(index);
}
inline void EchoRequest::set_select_column(int index, ::google::protobuf::int32 value) {
  select_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:data.EchoRequest.select_column)
}
inline void EchoRequest::add_select_column(::google::protobuf::int32 value) {
  select_column_.Add(value);
  // @@protoc_insertion_point(field_add:data.EchoRequest.select_column)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EchoRequest::select_column() const {
  // @@protoc_insertion_point(field_list:data.EchoRequest.select_column)
  return select_column_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EchoRequest::mutable_select_column() {
  // @@protoc_insertion_point(field_mutable_list:data.EchoRequest.select_column)
  return &select_column_;
}

// repeated int32 where_column = 2;
inline int EchoRequest::where_column_size() const {
  return where_column_.size();
}
inline void EchoRequest::clear_where_column() {
  where_column_.Clear();
}
inline ::google::protobuf::int32 EchoRequest::where_column(int index) const {
  // @@protoc_insertion_point(field_get:data.EchoRequest.where_column)
  return where_column_.Get(index);
}
inline void EchoRequest::set_where_column(int index, ::google::protobuf::int32 value) {
  where_column_.Set(index, value);
  // @@protoc_insertion_point(field_set:data.EchoRequest.where_column)
}
inline void EchoRequest::add_where_column(::google::protobuf::int32 value) {
  where_column_.Add(value);
  // @@protoc_insertion_point(field_add:data.EchoRequest.where_column)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EchoRequest::where_column() const {
  // @@protoc_insertion_point(field_list:data.EchoRequest.where_column)
  return where_column_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EchoRequest::mutable_where_column() {
  // @@protoc_insertion_point(field_mutable_list:data.EchoRequest.where_column)
  return &where_column_;
}

// repeated string column_key = 3;
inline int EchoRequest::column_key_size() const {
  return column_key_.size();
}
inline void EchoRequest::clear_column_key() {
  column_key_.Clear();
}
inline const ::std::string& EchoRequest::column_key(int index) const {
  // @@protoc_insertion_point(field_get:data.EchoRequest.column_key)
  return column_key_.Get(index);
}
inline ::std::string* EchoRequest::mutable_column_key(int index) {
  // @@protoc_insertion_point(field_mutable:data.EchoRequest.column_key)
  return column_key_.Mutable(index);
}
inline void EchoRequest::set_column_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:data.EchoRequest.column_key)
  column_key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EchoRequest::set_column_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:data.EchoRequest.column_key)
  column_key_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EchoRequest::set_column_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:data.EchoRequest.column_key)
}
inline void EchoRequest::set_column_key(int index, const char* value, size_t size) {
  column_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.EchoRequest.column_key)
}
inline ::std::string* EchoRequest::add_column_key() {
  // @@protoc_insertion_point(field_add_mutable:data.EchoRequest.column_key)
  return column_key_.Add();
}
inline void EchoRequest::add_column_key(const ::std::string& value) {
  column_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:data.EchoRequest.column_key)
}
#if LANG_CXX11
inline void EchoRequest::add_column_key(::std::string&& value) {
  column_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:data.EchoRequest.column_key)
}
#endif
inline void EchoRequest::add_column_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  column_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:data.EchoRequest.column_key)
}
inline void EchoRequest::add_column_key(const char* value, size_t size) {
  column_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:data.EchoRequest.column_key)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
EchoRequest::column_key() const {
  // @@protoc_insertion_point(field_list:data.EchoRequest.column_key)
  return column_key_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
EchoRequest::mutable_column_key() {
  // @@protoc_insertion_point(field_mutable_list:data.EchoRequest.column_key)
  return &column_key_;
}

// -------------------------------------------------------------------

// EchoResponse

// repeated string response = 1;
inline int EchoResponse::response_size() const {
  return response_.size();
}
inline void EchoResponse::clear_response() {
  response_.Clear();
}
inline const ::std::string& EchoResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:data.EchoResponse.response)
  return response_.Get(index);
}
inline ::std::string* EchoResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:data.EchoResponse.response)
  return response_.Mutable(index);
}
inline void EchoResponse::set_response(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:data.EchoResponse.response)
  response_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EchoResponse::set_response(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:data.EchoResponse.response)
  response_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EchoResponse::set_response(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:data.EchoResponse.response)
}
inline void EchoResponse::set_response(int index, const char* value, size_t size) {
  response_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:data.EchoResponse.response)
}
inline ::std::string* EchoResponse::add_response() {
  // @@protoc_insertion_point(field_add_mutable:data.EchoResponse.response)
  return response_.Add();
}
inline void EchoResponse::add_response(const ::std::string& value) {
  response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:data.EchoResponse.response)
}
#if LANG_CXX11
inline void EchoResponse::add_response(::std::string&& value) {
  response_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:data.EchoResponse.response)
}
#endif
inline void EchoResponse::add_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:data.EchoResponse.response)
}
inline void EchoResponse::add_response(const char* value, size_t size) {
  response_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:data.EchoResponse.response)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
EchoResponse::response() const {
  // @@protoc_insertion_point(field_list:data.EchoResponse.response)
  return response_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
EchoResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:data.EchoResponse.response)
  return &response_;
}

// repeated int32 len = 2;
inline int EchoResponse::len_size() const {
  return len_.size();
}
inline void EchoResponse::clear_len() {
  len_.Clear();
}
inline ::google::protobuf::int32 EchoResponse::len(int index) const {
  // @@protoc_insertion_point(field_get:data.EchoResponse.len)
  return len_.Get(index);
}
inline void EchoResponse::set_len(int index, ::google::protobuf::int32 value) {
  len_.Set(index, value);
  // @@protoc_insertion_point(field_set:data.EchoResponse.len)
}
inline void EchoResponse::add_len(::google::protobuf::int32 value) {
  len_.Add(value);
  // @@protoc_insertion_point(field_add:data.EchoResponse.len)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
EchoResponse::len() const {
  // @@protoc_insertion_point(field_list:data.EchoResponse.len)
  return len_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
EchoResponse::mutable_len() {
  // @@protoc_insertion_point(field_mutable_list:data.EchoResponse.len)
  return &len_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_data_2eproto
